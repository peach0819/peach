！！！！！！！！！微服务带来的改变

拆分微服务为单体，并定义单体服务api

微服务之间的进程间通信-dubbo
异步消息通信-rocketMq

分布式事务-saga

领域服务聚合-DDD

微服务架构中实现查询，
----API聚合模式 - 单体服务api，service聚合
----CQRS模式（视图聚合）- es搜索聚合多表，根据主键和外键

外部api调用（API Gateway）- hop


！！！！！！！面向生产环境的微服务
1、应用安全性
1）身份验证，登录信息
2）访问授权，ACL，权限控制
3）审计，用户操作跟踪
4）进程间通信加密

2、服务可配置性（配置中心）
从配置中心拉取（hione配置）
配置中心推送到机器（disconf）

3、可观测性（dubbo监控、日志记录）
健康检查api，/ok.html
日志聚合（sls）
分布式追踪（pinpoint）
应用指标监控（hisee）prometheus
异常告警（应用异常配置）
分布式微服务框架（dubbo） 熔断，降级，服务发现，权重


微服务基底->服务网格（多个微服务都在同一个网络层，解决同一个基底问题）
多个微服务自己负责微服务的基本信息，公共内容（hop，disconf）这些网格通用，单独搞

Docker：将服务部署为容器
1、将springBoot应用构建为包含jar包的Docker镜像（包含健康检查url、启动指令）
2、把Docker镜像推送到镜像仓库（类似Maven Central）
3、运行Docker容器（从镜像仓库拉到生产服务器，然后用镜像创建多个容器）

好处：
1、封装技术栈，纯黑盒容器，不关心内部技术，只要启动就行
2、服务实例是隔离的
3、资源是受限制的，不会影响别的进程

K8s: 
Docker编排框架
1、资源管理：将一组容器资源池视为一台计算机
2、调度：选择要运行容器的机器，将部分容器放一起，部分容器隔离开来
3、服务管理：命名和版本化服务，可以实现负载均衡以及管理服务不同版本的滚动升级（发布）以及回滚

k8s在一组宿主机上运行，分为主节点和普通节点，
主节点管理集群，普通节点运行pod，pod由一组容器组成

主节点组成：
1、API服务器：用于部署和管理服务的RestApi，可以通过接口调用k8s服务
2、etcd：存储集群数据KV对的Nosql数据库（redis）
3、调度器：选择要运行Pod的节点（判断需要跑到哪个普通节点）
4、控制器管理器：确保集群状态和预期状态匹配的管理器，通过各样的控制器来维持

普通节点组成：
1、Kubelet: 创建和管理节点上运行的pod
2、kube-proxy：将应用程序（客户端）请求路由到pod，可以直接使用代理，也可以通过配置Linux的iptables路由规则完成，包括负载均衡
3、Pods：应用程序服务，容器（一般一个pod对应一个应用的服务）

















