************************   聚簇索引
innoDb用的就是聚簇索引
聚簇索引指的就是，用一个主键（或者别的唯一且非空的列）做聚簇索引，
索引构造的B+tree每个叶子结点对应的就是索引的值和行的数据

该表的别的索引（复合索引，唯一索引，这种辅助索引）都是非聚簇索引，索引的B+tree的叶子结点，存的值都是聚簇索引的值（主键值）
然后通过聚簇索引二次查询，查询到行的数据

***********************  非聚簇索引
而MyISAM使用的非聚簇索引
非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，

聚簇索引的辅助键key是辅助键，值是主键，而非聚簇索引的辅助键key是辅助键，值是行数据

使用聚簇索引的优势：
1.由于行数据和聚簇索引的叶子节点存储在一起，同一页中会有多条行数据，访问同一数据页不同行记录时，
   已经把页加载到了Buffer中（缓存器），再次访问时，会在内存中完成访问，不必访问磁盘。
   这样主键和行数据是一起被载入内存的，找到叶子节点就可以立刻将行数据返回了，如果按照主键Id来组织数据，获得数据更快。

2.辅助索引的叶子节点，存储主键值，而不是数据的存放地址。好处是当行数据放生变化时，索引树的节点也需要分裂变化；
   或者是我们需要查找的数据，在上一次IO读写的缓存中没有，需要发生一次新的IO操作时，可以避免对辅助索引的维护工作，
   只需要维护聚簇索引树就好了。另一个好处是，因为辅助索引存放的是主键值，减少了辅助索引占用的存储空间大小。
注：我们知道一次io读写，可以获取到16K大小的资源，我们称之为读取到的数据区域为Page。而我们的B树，
       B+树的索引结构，叶子节点上存放好多个关键字（索引值）和对应的数据，都会在一次IO操作中被读取到缓存中，
       所以在访问同一个页中的不同记录时，会在内存里操作，而不用再次进行IO操作了。
       除非发生了页的分裂，即要查询的行数据不在上次IO操作的缓存里，才会触发新的IO操作。

3. 非聚簇索引的数据的物理地址是无顺序的（即不按主键排），要拿到地址需要大量IO操作

4.不过，如果涉及到大数据量的排序、全表扫描、count之类的操作的话，还是非聚簇索引占优势些，因为索引所占空间小，
    这些操作是需要在内存中完成的。
