Aop 是Spring框架面向切面编程，将通用的业务流程功能抽取并且单独封装，在合适的时候，以切面形式插入业务流程

比如一个系统中，用户登录是一个基础功能，如果把登录的代码写到业务流程里，那每个方法都要写，很难维护
一旦要修改，所有代码都要修改，显然不可取
此时将登录功能抽取出来，形成独立的模块，需要登录的时候，把登录功能切面 切入到业务流程即可

指定部分功能代码，做成一个切面，切入到业务类中，并针对业务类找到切入点，这就是aop
过程为：在Spring配置文件中配置AOP 添加切入面，切入点以及需要切入的目标Bean

AOP需要的依赖包
● spring-aop-5.0.8.RELEASE
● spring-aspects-5.0.8.RELEASE
● aspectjrt
● aspectjweaver

Spring框架提供了@AspectJ 注解方法和基于XML架构的方法来实现AOP。前面的案例是基于XML架构的方法，后面一节会讲述基于@AspectJ 注解的方法。下面结合前面的案例讲述一下AOP的相关术语。

● Aspect

表示切面。切入业务流程的一个独立模块。例如，前面案例的VerifyUser类，一个应用程序可以拥有任意数量的切面。

● Join point

表示连接点。也就是业务流程在运行过程中需要插入切面的具体位置。例如，前面案例的AopEmailNotice类的setTeacher方法就是一个连接点。

● Advice

表示通知。是切面的具体实现方法。可分为前置通知（Before）、后置通知（AfterReturning）、异常通知（AfterThrowing）、最终通知（After）和环绕通知（Around）五种。实现方法具体属于哪类通知，是在配置文件和注解中指定的。例如，VerifyUser类的beforeAdvice方法就是前置通知。

● Pointcut

表示切入点。用于定义通知应该切入到哪些连接点上，不同的通知通常需要切入到不同的连接点上。例如，前面案例配置文件的<aop:pointcut>标签。

● Target

表示目标对象。被一个或者多个切面所通知的对象。例如，前面案例的AopEmailNotice类。

● Proxy

表示代理对象。将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，代理对象为目标对象的业务逻辑功能加上被切入的切面所形成的对象。

● Weaving

表示切入，也称为织入。将切面应用到目标对象从而创建一个新的代理对象的过程。这个过程可以发生在编译期、类装载期及运行期。


